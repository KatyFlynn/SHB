# -*- coding: utf-8 -*-
"""katy-room-ocupancy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kUesf1PgmvS7e2dl-ADbFqwXAFAfv-3i
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split



from google.colab import files
uploaded = files.upload()

import io
threeDayData = pd.read_csv(io.BytesIO(uploaded['Data.csv']))
# Dataset is now stored in a Pandas Dataframe

threeDayData.head()

train3day = pd.DataFrame({'occupancy': threeDayData["Occupancy"],
                      'co2': threeDayData['co2'],
                    'pm25': threeDayData['pm25'],
                     'humidity':threeDayData['humidity'],
                      'voc': threeDayData['VOC']})

train3day

y = train3day['occupancy']

X = train3day.copy(deep=True)
X.drop('occupancy', inplace=True, axis=1)

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)

X

#train the RF classifier
clf = RandomForestClassifier(n_estimators = 500, max_depth = 6)
clf.fit(X_train,y_train)

RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',
                       max_depth=6, max_features='auto', max_leaf_nodes=None,
                       min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=500, n_jobs=1, oob_score=True, random_state=True,
                       verbose=0, warm_start=True)

clf.predict(X_test)

#make prediction and check model's accuracy
prediction = clf.predict(X_test)
acc =  accuracy_score(np.array(y_test),prediction)
print ('The accuracy of Random Forest is {} on data within the test set'.format(acc))

train3day

import pandas as pd

import numpy as np
 
importances = clf.feature_importances_
#
# Sort the feature importance in descending order
#
sorted_indices = np.argsort(importances)[::-1]
 
feat_labels = train3day.columns[1:]
 
for f in range(X_train.shape[1]):
    print("%2d) %-*s %f" % (f + 1, 30,
                            feat_labels[sorted_indices[f]],
                            importances[sorted_indices[f]])) 

import matplotlib.pyplot as plt
 
plt.title('Feature Importance')
plt.bar(range(X_train.shape[1]), importances[sorted_indices], align='center')
plt.xticks(range(X_train.shape[1]), X_train.columns[sorted_indices], rotation=90)
plt.tight_layout()
plt.show()

## use a different day of data and make that X_test --> run again without refitting the model
##import .csv that is just Tuesday 11/22 and wasn't a part of the modeling

from google.colab import files
uploaded = files.upload()

import io
df11_22 = pd.read_csv(io.BytesIO(uploaded['11_22.csv']))
# Dataset is now stored in a Pandas Dataframe

df11_22

train11_22 = pd.DataFrame({'occupancy': df11_22["Occupancy"],
                      'co2': df11_22['co2'],
                    'pm25': df11_22['pm25'],
                     'humidity':df11_22['humidity'],
                      'voc': df11_22['VOC']})

train11_22

y2 = train11_22['occupancy']

X2 = train11_22.copy(deep=True)
X2.drop('occupancy', inplace=True, axis=1)


X_train2,X_test2,y_train2,y_test2 = train_test_split(X2,y2,test_size=0.2,random_state=1)

#make prediction and check model's accuracy
prediction = clf.predict(X_test2)
acc =  accuracy_score(np.array(y_test2),prediction)
print ('The accuracy of Random Forest is {} for 11/22 from model of 11/28-11/30'.format(acc))

"""Same process, just with only CO2 - retrain the data to create a model from just c02 then check with 11_22 data

"""

##remake model using the full 3 day data set
train3 = pd.DataFrame({'occupancy': threeDayData["Occupancy"],
                      'co2': threeDayData['co2']})

train3

y = train3['occupancy']

X = train3.copy(deep=True)
X.drop('occupancy', inplace=True, axis=1)


X_train3,X_test3,y_train3,y_test3 = train_test_split(X,y,test_size=0.2,random_state=1)

#retrain the RF classifier using only c02
clf = RandomForestClassifier(n_estimators = 500, max_depth = 6)
clf.fit(X_train3,y_train3)

RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',
                       max_depth=6, max_features='auto', max_leaf_nodes=None,
                       min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=500, n_jobs=1, oob_score=False, random_state=None,
                       verbose=0, warm_start=False)

clf.predict(X_test3)

#make prediction and check model's accuracy
prediction = clf.predict(X_test3)
acc =  accuracy_score(np.array(y_test3),prediction)
print ('The accuracy of Random Forest is {} on data within the training set'.format(acc))

"""use a different day of data and make that X_test --> run again without refitting the model
import .csv that is just Tuesday 11/22 and wasn't a part of the modeling
"""



df11_22

trainCO2 = pd.DataFrame({'occupancy': df11_22["Occupancy"],
                      'co2': df11_22['co2']})

trainCO2

yCO2 = trainCO2['occupancy']

XCO2 = trainCO2.copy(deep=True)
XCO2.drop('occupancy', inplace=True, axis=1)


X_trainCO2,X_testCO2,y_trainCO2,y_testCO2 = train_test_split(XCO2,yCO2,test_size=0.2,random_state=1)

#make prediction and check model's accuracy
prediction = clf.predict(X_testCO2)
acc =  accuracy_score(np.array(y_testCO2),prediction)
print ('The accuracy of Random Forest is {} for 11/22 from model of 11/28-11/30 JUST CO2'.format(acc))

"""Same process, just with only HUMIDITY - retrain the data to create a model from just HUNMIDITY then check with 11_22 data

"""

##remake model using the full 3 day data set
train4 = pd.DataFrame({'occupancy': threeDayData["Occupancy"],
                      'humidity': threeDayData['humidity']})

train4

y = train4['occupancy']

X = train4
X_train4,X_test4,y_train4,y_test4 = train_test_split(X,y,test_size=0.2,random_state=1)

#retrain the RF classifier using only c02
clf = RandomForestClassifier(n_estimators = 500, max_depth = 6)
clf.fit(X_train4,y_train4)

RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',
                       max_depth=6, max_features='auto', max_leaf_nodes=None,
                       min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=500, n_jobs=1, oob_score=False, random_state=None,
                       verbose=0, warm_start=False)

clf.predict(X_test4)

"""use a different day of data and make that X_test --> run again without refitting the model
import .csv that is just Tuesday 11/22 and wasn't a part of the modeling
"""

df11_22

trainHUM = pd.DataFrame({'occupancy': df11_22["Occupancy"],
                      'humidity': df11_22['humidity']})
testHUM = pd.DataFrame()

trainHUM

yHUM = trainHUM['occupancy']

XHUM = trainHUM
X_trainHUM,X_testHUM,y_trainHUM,y_testHUM = train_test_split(XHUM,yHUM,test_size=0.2,random_state=1)

#make prediction and check model's accuracy
prediction = clf.predict(X_testHUM)
acc =  accuracy_score(np.array(y_testHUM),prediction)
print ('The accuracy of Random Forest is {} for 11/22 from model of 11/28-11/30 JUST HUM'.format(acc))